{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user-auth.service\";\nexport class UserService {\n  constructor(httpclient, userAuthService) {\n    this.httpclient = httpclient;\n    this.userAuthService = userAuthService;\n    this.PATH_OF_API = \"http://localhost:9090\";\n    this.requestHeader = new HttpHeaders({\n      \"No-Auth\": \"True\"\n    });\n  }\n  login(loginData) {\n    return this.httpclient.post(this.PATH_OF_API + \"/authenticate\", loginData, {\n      headers: this.requestHeader\n    });\n  }\n  forUser() {\n    return this.httpclient.get(this.PATH_OF_API + '/forUser', {\n      responseType: 'text'\n    });\n  }\n  forAdmin() {\n    return this.httpclient.get(this.PATH_OF_API + '/forAdmin', {\n      responseType: 'text'\n    });\n  }\n  roleMatch(allowedRoles) {\n    let isMatch = false;\n    const userRoles = this.userAuthService.getRoles();\n    if (userRoles != null && userRoles) {\n      for (let i = 0; i < userRoles.length; i++) {\n        for (let j = 0; j < allowedRoles.length; j++) {\n          if (userRoles[i].roleName === allowedRoles[j]) {\n            isMatch = true;\n            return isMatch;\n          } else {\n            return isMatch;\n          }\n        }\n      }\n    }\n    return isMatch;\n  }\n  register(registerData) {\n    return this.httpclient.post(this.PATH_OF_API + '/registerNewUser', registerData);\n  }\n}\n_class = UserService;\n_class.ɵfac = function UserService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAuthService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","UserService","constructor","httpclient","userAuthService","PATH_OF_API","requestHeader","login","loginData","post","headers","forUser","get","responseType","forAdmin","roleMatch","allowedRoles","isMatch","userRoles","getRoles","i","length","j","roleName","register","registerData","i0","ɵɵinject","i1","HttpClient","i2","UserAuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Owner\\E-CommercePRoject\\e-commerce-ui-master\\src\\app\\_services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { UserAuthService } from './user-auth.service';\nimport { UserModal } from '../_model/user.modal';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  PATH_OF_API = \"http://localhost:9090\";\n\n  requestHeader = new HttpHeaders(\n    { \"No-Auth\": \"True\" })\n  constructor(private httpclient: HttpClient,\n    private userAuthService: UserAuthService) { }\n\n  public login(loginData:UserModal) {\n    return this.httpclient.post<UserModal>(this.PATH_OF_API + \"/authenticate\",\n      loginData, { headers: this.requestHeader });\n  }\n\n  public forUser() {\n    return this.httpclient.get(this.PATH_OF_API + '/forUser',{\n      responseType:'text'\n    });\n  }\n\n  public forAdmin() {\n    return this.httpclient.get(this.PATH_OF_API + '/forAdmin',{\n      responseType:'text'\n    });\n  }\n  public roleMatch(allowedRoles: string | any[]): boolean {\n    let isMatch = false;\n    const userRoles: any = this.userAuthService.getRoles();\n    if (userRoles != null && userRoles) {\n      for (let i = 0; i < userRoles.length; i++) {\n        for (let j = 0; j < allowedRoles.length; j++) {\n          if (userRoles[i].roleName === allowedRoles[j]) {\n            isMatch = true;\n            return isMatch;\n          } else {\n            return isMatch;\n          }\n        }\n      }\n    }\n    return isMatch;\n  }\n  public register(registerData: any){\n    return this.httpclient.post(this.PATH_OF_API+'/registerNewUser',registerData);\n  }\n}"],"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAQ9D,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,UAAsB,EAChCC,eAAgC;IADtB,KAAAD,UAAU,GAAVA,UAAU;IACpB,KAAAC,eAAe,GAAfA,eAAe;IALzB,KAAAC,WAAW,GAAG,uBAAuB;IAErC,KAAAC,aAAa,GAAG,IAAIN,WAAW,CAC7B;MAAE,SAAS,EAAE;IAAM,CAAE,CAAC;EAEsB;EAEvCO,KAAKA,CAACC,SAAmB;IAC9B,OAAO,IAAI,CAACL,UAAU,CAACM,IAAI,CAAY,IAAI,CAACJ,WAAW,GAAG,eAAe,EACvEG,SAAS,EAAE;MAAEE,OAAO,EAAE,IAAI,CAACJ;IAAa,CAAE,CAAC;EAC/C;EAEOK,OAAOA,CAAA;IACZ,OAAO,IAAI,CAACR,UAAU,CAACS,GAAG,CAAC,IAAI,CAACP,WAAW,GAAG,UAAU,EAAC;MACvDQ,YAAY,EAAC;KACd,CAAC;EACJ;EAEOC,QAAQA,CAAA;IACb,OAAO,IAAI,CAACX,UAAU,CAACS,GAAG,CAAC,IAAI,CAACP,WAAW,GAAG,WAAW,EAAC;MACxDQ,YAAY,EAAC;KACd,CAAC;EACJ;EACOE,SAASA,CAACC,YAA4B;IAC3C,IAAIC,OAAO,GAAG,KAAK;IACnB,MAAMC,SAAS,GAAQ,IAAI,CAACd,eAAe,CAACe,QAAQ,EAAE;IACtD,IAAID,SAAS,IAAI,IAAI,IAAIA,SAAS,EAAE;MAClC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAE;UAC5C,IAAIJ,SAAS,CAACE,CAAC,CAAC,CAACG,QAAQ,KAAKP,YAAY,CAACM,CAAC,CAAC,EAAE;YAC7CL,OAAO,GAAG,IAAI;YACd,OAAOA,OAAO;WACf,MAAM;YACL,OAAOA,OAAO;;;;;IAKtB,OAAOA,OAAO;EAChB;EACOO,QAAQA,CAACC,YAAiB;IAC/B,OAAO,IAAI,CAACtB,UAAU,CAACM,IAAI,CAAC,IAAI,CAACJ,WAAW,GAAC,kBAAkB,EAACoB,YAAY,CAAC;EAC/E;;SA5CWxB,WAAW;;mBAAXA,MAAW,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,eAAA;AAAA;;SAAX9B,MAAW;EAAA+B,OAAA,EAAX/B,MAAW,CAAAgC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
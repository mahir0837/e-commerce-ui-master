{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport class ImageProcessingService {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n  }\n  createImages(product) {\n    const prodductImages = product.productImages;\n    const productImagesToFileHandle = [];\n    for (let i = 0; i < prodductImages.length; i++) {\n      const imageFileData = prodductImages[i];\n      const imageBlob = this.dataURItoBlob(imageFileData.picByte, imageFileData.type);\n      const imageFile = new File([imageBlob], imageFileData.name, {\n        type: imageFileData.type\n      });\n      const finalFileHandle = {\n        file: imageFile,\n        url: this.sanitizer.bypassSecurityTrustUrl(window.URL.createObjectURL(imageFile))\n      };\n      productImagesToFileHandle.push(finalFileHandle);\n    }\n    product.productImages = productImagesToFileHandle;\n    return product;\n  }\n  dataURItoBlob(picBytes, imageType) {\n    const byteString = window.atob(picBytes);\n    const arrayBuffer = new ArrayBuffer(byteString.length);\n    const int8Array = new Uint8Array(arrayBuffer);\n    for (let i = 0; i < byteString.length; i++) {\n      int8Array[i] = byteString.charCodeAt(i);\n    }\n    const blob = new Blob([int8Array], {\n      type: imageType\n    });\n    return blob;\n  }\n}\n_class = ImageProcessingService;\n_class.ɵfac = function ImageProcessingService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.DomSanitizer));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["ImageProcessingService","constructor","sanitizer","createImages","product","prodductImages","productImages","productImagesToFileHandle","i","length","imageFileData","imageBlob","dataURItoBlob","picByte","type","imageFile","File","name","finalFileHandle","file","url","bypassSecurityTrustUrl","window","URL","createObjectURL","push","picBytes","imageType","byteString","atob","arrayBuffer","ArrayBuffer","int8Array","Uint8Array","charCodeAt","blob","Blob","i0","ɵɵinject","i1","DomSanitizer","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Owner\\E-CommercePRoject\\e-commerce-ui-master\\src\\app\\image-processing.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Product } from './_model/product.model';\nimport { FileHandle } from './_model/file-handle.model';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageProcessingService {\n\n  constructor( private sanitizer:DomSanitizer) { }\n\n  public createImages(product: Product) {\n\n    const prodductImages: any[] = product.productImages;\n\n    const productImagesToFileHandle: FileHandle[] = [];\n\n    for (let i = 0; i < prodductImages.length; i++) {\n      const imageFileData = prodductImages[i];\n      const imageBlob=this.dataURItoBlob(imageFileData.picByte,imageFileData.type);\n\n      const imageFile=new File([imageBlob],imageFileData.name,{ type:imageFileData.type });\n\n      const finalFileHandle:FileHandle={\n        file:imageFile,\n        url: this.sanitizer.bypassSecurityTrustUrl(window.URL.createObjectURL(imageFile))\n      };\n      productImagesToFileHandle.push(finalFileHandle);\n    }\n    product.productImages=productImagesToFileHandle;\n    return product;\n  }\n\n  public dataURItoBlob(picBytes: string,imageType: any){\n    const byteString =window.atob(picBytes);\n    const arrayBuffer=new ArrayBuffer(byteString.length);\n    const int8Array=new Uint8Array(arrayBuffer);\n    \n    for (let i = 0; i < byteString.length; i++) {\n     int8Array[i]= byteString.charCodeAt(i);\n    }\n\n   const blob= new Blob([int8Array],{ type : imageType});\n   return blob;\n  }\n}\n"],"mappings":";;;AAQA,OAAM,MAAOA,sBAAsB;EAEjCC,YAAqBC,SAAsB;IAAtB,KAAAA,SAAS,GAATA,SAAS;EAAiB;EAExCC,YAAYA,CAACC,OAAgB;IAElC,MAAMC,cAAc,GAAUD,OAAO,CAACE,aAAa;IAEnD,MAAMC,yBAAyB,GAAiB,EAAE;IAElD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,cAAc,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MAC9C,MAAME,aAAa,GAAGL,cAAc,CAACG,CAAC,CAAC;MACvC,MAAMG,SAAS,GAAC,IAAI,CAACC,aAAa,CAACF,aAAa,CAACG,OAAO,EAACH,aAAa,CAACI,IAAI,CAAC;MAE5E,MAAMC,SAAS,GAAC,IAAIC,IAAI,CAAC,CAACL,SAAS,CAAC,EAACD,aAAa,CAACO,IAAI,EAAC;QAAEH,IAAI,EAACJ,aAAa,CAACI;MAAI,CAAE,CAAC;MAEpF,MAAMI,eAAe,GAAY;QAC/BC,IAAI,EAACJ,SAAS;QACdK,GAAG,EAAE,IAAI,CAAClB,SAAS,CAACmB,sBAAsB,CAACC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACT,SAAS,CAAC;OACjF;MACDR,yBAAyB,CAACkB,IAAI,CAACP,eAAe,CAAC;;IAEjDd,OAAO,CAACE,aAAa,GAACC,yBAAyB;IAC/C,OAAOH,OAAO;EAChB;EAEOQ,aAAaA,CAACc,QAAgB,EAACC,SAAc;IAClD,MAAMC,UAAU,GAAEN,MAAM,CAACO,IAAI,CAACH,QAAQ,CAAC;IACvC,MAAMI,WAAW,GAAC,IAAIC,WAAW,CAACH,UAAU,CAACnB,MAAM,CAAC;IACpD,MAAMuB,SAAS,GAAC,IAAIC,UAAU,CAACH,WAAW,CAAC;IAE3C,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,UAAU,CAACnB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3CwB,SAAS,CAACxB,CAAC,CAAC,GAAEoB,UAAU,CAACM,UAAU,CAAC1B,CAAC,CAAC;;IAGxC,MAAM2B,IAAI,GAAE,IAAIC,IAAI,CAAC,CAACJ,SAAS,CAAC,EAAC;MAAElB,IAAI,EAAGa;IAAS,CAAC,CAAC;IACrD,OAAOQ,IAAI;EACZ;;SArCWnC,sBAAsB;;mBAAtBA,MAAsB,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;AAAA;;SAAtBxC,MAAsB;EAAAyC,OAAA,EAAtBzC,MAAsB,CAAA0C,IAAA;EAAAC,UAAA,EAFrB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
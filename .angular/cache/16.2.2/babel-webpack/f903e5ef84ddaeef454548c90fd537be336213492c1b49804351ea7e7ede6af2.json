{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class UserAuthService {\n  constructor() {}\n  setRoles(roles) {\n    localStorage.setItem('roles', JSON.stringify(roles));\n  }\n  getRoles() {\n    const rolesJSON = localStorage.getItem('roles');\n    if (rolesJSON) {\n      return JSON.parse(rolesJSON);\n    } else {\n      return []; // Return an empty array as a default value if 'roles' is not found in localStorage\n    }\n  }\n\n  setToken(jwtToken) {\n    localStorage.setItem('jwtToken', jwtToken);\n  }\n  getToken() {\n    const result = localStorage.getItem('jwtToken');\n    if (result) {\n      return result;\n    } else {\n      return '';\n    }\n  }\n  clear() {\n    localStorage.clear();\n  }\n  isLoggedIn() {\n    return this.getRoles() && this.getToken();\n  }\n  isAdmin() {\n    const roles = this.getRoles();\n    return roles[0].roleName === 'Admin';\n  }\n  isUser() {\n    const roles = this.getRoles();\n    return roles[0].roleName === 'User';\n  }\n}\n_class = UserAuthService;\n_class.ɵfac = function UserAuthService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserAuthService","constructor","setRoles","roles","localStorage","setItem","JSON","stringify","getRoles","rolesJSON","getItem","parse","setToken","jwtToken","getToken","result","clear","isLoggedIn","isAdmin","roleName","isUser","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Owner\\E-CommercePRoject\\e-commerce-ui-master\\src\\app\\_services\\user-auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAuthService {\n  \n  constructor() { }\n  public setRoles(roles: []) {\n    localStorage.setItem('roles', JSON.stringify(roles));\n  }\n  public getRoles(): string[] {\n    const rolesJSON = localStorage.getItem('roles');\n    if (rolesJSON) {\n      return JSON.parse(rolesJSON);\n    } else {\n      return []; // Return an empty array as a default value if 'roles' is not found in localStorage\n    }\n  }\n  public setToken(jwtToken: string) {\n    localStorage.setItem('jwtToken', jwtToken)\n  }\n  public getToken(): string {\n    const result = localStorage.getItem('jwtToken');\n    if (result) {\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  public clear() {\n    localStorage.clear();\n  }\n\n  public isLoggedIn() {\n    return this.getRoles() && this.getToken();\n  }\n\n  public isAdmin() {\n    const roles: any[] = this.getRoles();\n    return (roles[0].roleName==='Admin'); \n  }\n\n  public isUser(){\n    const roles: any[] = this.getRoles();\n    return (roles[0].roleName==='User') \n  }\n}\n"],"mappings":";;AAKA,OAAM,MAAOA,eAAe;EAE1BC,YAAA,GAAgB;EACTC,QAAQA,CAACC,KAAS;IACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;EACtD;EACOK,QAAQA,CAAA;IACb,MAAMC,SAAS,GAAGL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;IAC/C,IAAID,SAAS,EAAE;MACb,OAAOH,IAAI,CAACK,KAAK,CAACF,SAAS,CAAC;KAC7B,MAAM;MACL,OAAO,EAAE,CAAC,CAAC;;EAEf;;EACOG,QAAQA,CAACC,QAAgB;IAC9BT,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEQ,QAAQ,CAAC;EAC5C;EACOC,QAAQA,CAAA;IACb,MAAMC,MAAM,GAAGX,YAAY,CAACM,OAAO,CAAC,UAAU,CAAC;IAC/C,IAAIK,MAAM,EAAE;MACV,OAAOA,MAAM;KACd,MAAM;MACL,OAAO,EAAE;;EAEb;EAEOC,KAAKA,CAAA;IACVZ,YAAY,CAACY,KAAK,EAAE;EACtB;EAEOC,UAAUA,CAAA;IACf,OAAO,IAAI,CAACT,QAAQ,EAAE,IAAI,IAAI,CAACM,QAAQ,EAAE;EAC3C;EAEOI,OAAOA,CAAA;IACZ,MAAMf,KAAK,GAAU,IAAI,CAACK,QAAQ,EAAE;IACpC,OAAQL,KAAK,CAAC,CAAC,CAAC,CAACgB,QAAQ,KAAG,OAAO;EACrC;EAEOC,MAAMA,CAAA;IACX,MAAMjB,KAAK,GAAU,IAAI,CAACK,QAAQ,EAAE;IACpC,OAAQL,KAAK,CAAC,CAAC,CAAC,CAACgB,QAAQ,KAAG,MAAM;EACpC;;SA1CWnB,eAAe;;mBAAfA,MAAe;AAAA;;SAAfA,MAAe;EAAAqB,OAAA,EAAfrB,MAAe,CAAAsB,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
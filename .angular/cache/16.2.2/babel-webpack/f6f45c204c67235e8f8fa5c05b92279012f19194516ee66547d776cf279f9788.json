{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { Subject, tap } from 'rxjs';\nimport { environment } from 'src/environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.server = environment.API_BASE_URL;\n    this._refreshRequiered = new Subject();\n  }\n  get refresh() {\n    return this._refreshRequiered;\n  }\n  getUserDetails(userName) {\n    return this.httpClient.get(`${this.server}/userDetails/{userName}`);\n  }\n  addProduct(product) {\n    return this.httpClient.post(`${this.server}/product/addNewProduct`, product);\n  }\n  getProducts(pageNumber, searchKeyword = \"\") {\n    return this.httpClient.get(`${this.server}/product/getAllProducts?pageNumber=` + pageNumber + \"&searchKey=\" + searchKeyword);\n  }\n  getAllProducts(pageNumber, searchKeyword = \"\", categoryId, productBrandId, selectedSortValue) {\n    return this.httpClient.get(`${this.server}/product/getAllProducts?pageNumber=` + pageNumber + \"&searchKey=\" + searchKeyword + \"&categoryId=\" + categoryId + \"&productBrandId=\" + productBrandId + \"&selectedSortValue=\" + selectedSortValue);\n  }\n  getAllProductsBaseOnTheCategory(pageNumber, searchKeyword = \"\", categoryId) {\n    return this.httpClient.get(`${this.server}/product/getAllProducts?pageNumber=` + pageNumber + \"&searchKey=\" + searchKeyword + \"&categoryId=\" + categoryId);\n  }\n  deleteProduct(productId) {\n    return this.httpClient.delete(`${this.server}/product/deleteProductDetails/` + productId);\n  }\n  getProductDetailById(productId) {\n    return this.httpClient.get(`${this.server}/product/getProductDetailsById/` + productId);\n  }\n  getProductDetails(isSingleProductChekout, productId) {\n    return this.httpClient.get(`${this.server}/product/getProductDetails/` + isSingleProductChekout + \"/\" + productId);\n  }\n  placeOrder(orderDetails, isCartChekout) {\n    return this.httpClient.post(`${this.server}/orders/placeOrder/` + isCartChekout, orderDetails);\n  }\n  addToCart(productId) {\n    return this.httpClient.get(`${this.server}/cart/addToCart/` + productId).pipe(tap(() => {\n      this.refresh.next();\n    }));\n  }\n  getCartDetails() {\n    return this.httpClient.get(`${this.server}/cart/getCardDetails`);\n  }\n  deleteCartItem(cartId) {\n    return this.httpClient.delete(`${this.server}/cart/deleteCartItem/` + cartId);\n  }\n  getOrderDetails() {\n    return this.httpClient.get(`${this.server}/orders/getOrderDetails`);\n  }\n  getAllOrderDetailsForAdmin(orderStatus) {\n    return this.httpClient.get(`${this.server}/orders/getAllOrderDetails/` + orderStatus);\n  }\n  markOrderAsDelivered(orderId, addDays) {\n    return this.httpClient.get(`${this.server}/orders/markOrderAsDelivered/` + orderId + '/' + addDays);\n  }\n  markOrderAsProcessing(orderId, addDays) {\n    return this.httpClient.get(`${this.server}/orders/markOrderAsProcessing/` + orderId + '/' + addDays);\n  }\n  markOrderAsQualityCheck(orderId, addDays) {\n    return this.httpClient.get(`${this.server}/orders/markOrderAsQualityCheck/` + orderId + '/' + addDays);\n  }\n  createTransection(orderData, userName, amount) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.httpClient.post(`${this.server}/orders/createTransection/` + userName + \"/\" + amount, JSON.stringify(orderData), {\n      headers\n    });\n  }\n  addCategory(category) {\n    return this.httpClient.post(`${this.server}/category/addNewCategory`, category);\n  }\n  getAllCategories() {\n    return this.httpClient.get(`${this.server}/category/getAllCategories`);\n  }\n  getCategoryById(id) {\n    return this.httpClient.get(`${this.server}/category/getCategoryById/` + id);\n  }\n  deleteCategory(id) {\n    return this.httpClient.delete(`${this.server}/category/deleteCategory/` + id);\n  }\n  getWishList() {\n    return this.httpClient.get(`${this.server}/wishlist/getAllWishList`);\n  }\n  addNewWishList(productId) {\n    return this.httpClient.get(`${this.server}/wishlist/addWishList?productId=` + productId);\n  }\n  deleteWishListItem(wishListId) {\n    return this.httpClient.delete(`${this.server}/wishlist/delete/` + wishListId);\n  }\n  getAllBrand(categoryId) {\n    return this.httpClient.get(`${this.server}/brand/getAllBrand?categoryId=` + categoryId);\n  }\n  addNewBrand(brand) {\n    return this.httpClient.post(`${this.server}/brand/addBrand`, brand);\n  }\n}\n_class = ProductService;\n_class.ɵfac = function ProductService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","Subject","tap","environment","ProductService","constructor","httpClient","server","API_BASE_URL","_refreshRequiered","refresh","getUserDetails","userName","get","addProduct","product","post","getProducts","pageNumber","searchKeyword","getAllProducts","categoryId","productBrandId","selectedSortValue","getAllProductsBaseOnTheCategory","deleteProduct","productId","delete","getProductDetailById","getProductDetails","isSingleProductChekout","placeOrder","orderDetails","isCartChekout","addToCart","pipe","next","getCartDetails","deleteCartItem","cartId","getOrderDetails","getAllOrderDetailsForAdmin","orderStatus","markOrderAsDelivered","orderId","addDays","markOrderAsProcessing","markOrderAsQualityCheck","createTransection","orderData","amount","headers","JSON","stringify","addCategory","category","getAllCategories","getCategoryById","id","deleteCategory","getWishList","addNewWishList","deleteWishListItem","wishListId","getAllBrand","addNewBrand","brand","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Owner\\E-CommercePRoject\\e-commerce-ui-master\\src\\app\\_services\\product.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Product } from '../_model/product.model';\nimport { OrderDetails } from '../_model/order-details-model';\nimport { MyOrderDetails } from '../_model/order.model';\nimport { Observable, Subject, tap } from 'rxjs';\nimport { CartDetails } from '../_model/cart-details-model';\nimport { Category } from '../_model/category-modal';\nimport { WishList } from '../_model/wishlist-modal';\nimport { Brand } from '../_model/brand-modal';\nimport { UserModal } from '../_model/user.modal';\nimport { environment } from 'src/environment/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  private readonly server:string=environment.API_BASE_URL;\n  constructor(private httpClient: HttpClient) { }\n\n  private _refreshRequiered=new Subject<void>();\n  get refresh(){\n    return this._refreshRequiered;\n  }\n  public getUserDetails(userName:string){\n    return this.httpClient.get<UserModal>(`${this.server}/userDetails/{userName}`)\n  }\n  public addProduct(product: FormData) {\n    return this.httpClient.post<Product>(`${this.server}/product/addNewProduct`, product);\n  }\n  public getProducts(pageNumber:number,searchKeyword:string=\"\"){\n    return this.httpClient.get<Product[]>(`${this.server}/product/getAllProducts?pageNumber=`+pageNumber+\"&searchKey=\"+searchKeyword);\n  }\n  public getAllProducts(pageNumber:number,searchKeyword:string=\"\",categoryId:number,productBrandId:number,selectedSortValue:number){\n    return this.httpClient.get<Product[]>(`${this.server}/product/getAllProducts?pageNumber=`+pageNumber+\"&searchKey=\"+searchKeyword+\"&categoryId=\"+categoryId+\"&productBrandId=\"+productBrandId+\"&selectedSortValue=\"+selectedSortValue);\n  }\n  public getAllProductsBaseOnTheCategory(pageNumber:number,searchKeyword:string=\"\",categoryId:number){\n    return this.httpClient.get<Product[]>(`${this.server}/product/getAllProducts?pageNumber=`+pageNumber+\"&searchKey=\"+searchKeyword+\"&categoryId=\"+categoryId);\n  }\n\n  public deleteProduct(productId:number){\n    return this.httpClient.delete<Product>(`${this.server}/product/deleteProductDetails/`+productId);\n  }\n\n  public getProductDetailById(productId:number){\n    return this.httpClient.get<Product>(`${this.server}/product/getProductDetailsById/`+productId);\n  }\n  public getProductDetails(isSingleProductChekout:boolean,productId: number){\n    return this.httpClient.get<Product[]>(`${this.server}/product/getProductDetails/`+isSingleProductChekout+\"/\"+productId);\n  }\n  public placeOrder(orderDetails:OrderDetails,isCartChekout:boolean){\n    return this.httpClient.post<OrderDetails>(`${this.server}/orders/placeOrder/`+isCartChekout,orderDetails);\n  }\n  public addToCart(productId:number){\n    return this.httpClient.get(`${this.server}/cart/addToCart/`+productId).pipe(\n      tap(()=>{\n        this.refresh.next();\n      })\n    )\n  }\n  public getCartDetails(){\n    return this.httpClient.get<CartDetails[]>(`${this.server}/cart/getCardDetails`)\n  }\n  public deleteCartItem(cartId:number){\n    return this.httpClient.delete(`${this.server}/cart/deleteCartItem/`+cartId)\n  }\n  public getOrderDetails():Observable<MyOrderDetails[]>{\n    return this.httpClient.get<MyOrderDetails[]>(`${this.server}/orders/getOrderDetails`)\n  }\n\n  public getAllOrderDetailsForAdmin(orderStatus:string):Observable<MyOrderDetails[]>{\n    return this.httpClient.get<MyOrderDetails[]>(`${this.server}/orders/getAllOrderDetails/`+orderStatus)\n  }\n  public markOrderAsDelivered(orderId:number,addDays:number){\n    return this.httpClient.get<MyOrderDetails[]>(`${this.server}/orders/markOrderAsDelivered/`+orderId+'/'+addDays)\n  }\n  public markOrderAsProcessing(orderId:number,addDays:number){\n     return this.httpClient.get<MyOrderDetails[]>(`${this.server}/orders/markOrderAsProcessing/`+orderId+'/'+addDays)\n  }\n  public markOrderAsQualityCheck(orderId:number,addDays:number){\n    return this.httpClient.get<MyOrderDetails[]>(`${this.server}/orders/markOrderAsQualityCheck/`+orderId+'/'+addDays)\n  }\n\n  createTransection(orderData: OrderDetails,userName:string,amount:number){\n   \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.httpClient.post<OrderDetails>(`${this.server}/orders/createTransection/`+userName+\"/\"+amount, JSON.stringify(orderData),{headers});\n  }\n\n  public addCategory(category:Category){\n    return this.httpClient.post<Category>(`${this.server}/category/addNewCategory`,category)\n  }\n  public getAllCategories(){\n    return this.httpClient.get<Category[]>(`${this.server}/category/getAllCategories`)\n  }\n  public getCategoryById(id:number){\n    return this.httpClient.get<Category>(`${this.server}/category/getCategoryById/`+id)\n  }\n public deleteCategory(id:number){\n  return this.httpClient.delete(`${this.server}/category/deleteCategory/`+id)\n }\n  public getWishList(){\n    return this.httpClient.get<WishList[]>(`${this.server}/wishlist/getAllWishList`);\n  }\n  public addNewWishList(productId:number){\n    return this.httpClient.get(`${this.server}/wishlist/addWishList?productId=`+productId);\n  }\n\n  public deleteWishListItem(wishListId:number){\n    return this.httpClient.delete<WishList>(`${this.server}/wishlist/delete/`+wishListId);\n  }\n  public getAllBrand(categoryId:number){\n    return this.httpClient.get<Brand[]>(`${this.server}/brand/getAllBrand?categoryId=`+categoryId);\n  }\n  public addNewBrand(brand:Brand){\n    return this.httpClient.post<Brand>(`${this.server}/brand/addBrand`,brand);\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}